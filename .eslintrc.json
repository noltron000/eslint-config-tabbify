{
	"rules": {
		/* FIXES FOR POSSIBLE PROBLEMS */
		// NOTE: This rule can report false-positives.
		"array-callback-return": ["off"],

		"constructor-super": ["error"],
		"for-direction": ["error"],
		"getter-return": ["error"],
		"no-async-promise-executor": ["error"],

		// NOTE: Sometimes its useful to have "await" in a loop.
		"no-await-in-loop": ["warn"],

		"no-class-assign": ["error"],
		"no-compare-neg-zero": ["error"],
		"no-cond-assign": ["error"],
		"no-const-assign": ["error"],
		"no-constant-binary-expression": ["error"],

		// NOTE: It can be useful to use "while (true)" loops.
		"no-constant-condition": [
		"error",
			{"checkLoops": false}
		],

		// NOTE: Returning in a constructor can be intentional.
		"no-constructor-return": ["warn"],

		"no-control-regex": ["error"],
		"no-debugger": ["error"],
		"no-dupe-args": ["error"],
		"no-dupe-class-members": ["error"],
		"no-dupe-else-if": ["error"],
		"no-dupe-keys": ["error"],
		"no-duplicate-case": ["error"],
		"no-duplicate-imports": ["error"],
		"no-empty-character-class": ["error"],
		"no-empty-pattern": ["error"],
		"no-ex-assign": ["error"],
		"no-fallthrough": ["error"],
		"no-func-assign": ["error"],
		"no-import-assign": ["error"],

		// NOTE: Clean out certain hoisted patterns.
		"no-inner-declarations": [
			"error",
			"both"
		],

		"no-invalid-regexp": ["error"],
		"no-irregular-whitespace": ["error"],
		"no-loss-of-precision": ["error"],
		"no-misleading-character-class": ["error"],
		"no-new-symbol": ["error"],
		"no-obj-calls": ["error"],
		"no-promise-executor-return": ["error"],
		"no-prototype-builtins": ["error"],
		"no-self-assign": ["error"],
		"no-self-compare": ["error"],
		"no-setter-return": ["error"],
		"no-sparse-arrays": ["error"],
		"no-template-curly-in-string": ["error"],
		"no-this-before-super": ["error"],

		// NOTE: Prevent using global vars without tagging them.
		"no-undef": [
			"error",
			{"typeof": true}
		],

		"no-unexpected-multiline": ["error"],
		"no-unmodified-loop-condition": ["error"],
		"no-unreachable": ["error"],
		"no-unreachable-loop": ["error"],
		"no-unsafe-finally": ["error"],

		// NOTE: Check for unclear negation with relational operators.
		"no-unsafe-negation": [
			"error",
			{"enforceForOrderingRelations": true}
		],

		// NOTE: Disallow some ambiguous math resulting in "NaN".
		"no-unsafe-optional-chaining": [
			"error",
			{"disallowArithmeticOperators": true}
		],

		"no-unused-private-class-members": ["error"],

		// NOTE:
		// Allow omission of properties from a spread object.
		// Also, sometimes its good to explicitly set expected args,
		// 	even if they remain unused in the function's body.
		"no-unused-vars": [
			"error",
			{"args": "none", "ignoreRestSiblings": true}
		],

		"no-use-before-define": ["error"],
		"no-useless-backreference": ["error"],
		"require-atomic-updates": ["error"],
		"use-isnan": ["error"],
		"valid-typeof": ["error"],

		/* RULES FOR ALTERNATE SUGGESTIONS */
		"accessor-pairs": ["error"],
		"arrow-body-style": ["error"],
		"block-scoped-var": ["error"],
		"camelcase": ["error"],

		// NOTE: This one was excessively annoying!
		"capitalized-comments": ["off"],

		"class-methods-use-this": ["error"],
		"complexity": ["error"],
		"consistent-return": ["error"],
		"consistent-this": ["error"],

		// NOTE: This one is important to get right.
		"curly": [
			"error",
			"multi",
			"consistent"
		],

		// NOTE: Don't mess with default cases.
		"default-case": ["off"],
		"default-case-last": ["off"],

		"default-param-last": ["error"],
		"dot-notation": ["error"],

		// NOTE: Use triple equals except when comparing null loosely.
		"eqeqeq": [
			"error",
			"always",
			{"null": "ignore"}
		],

		"func-name-matching": ["error"],

		// NOTE: should use "const x = function(){...}"
		"func-names": [
			"error",
			"never"
		],

		"func-style": ["error"],

		// NOTE: Gets & Sets paired together?
		// TODO: Test this one out.
		"grouped-accessor-pairs": [
			"error",
			"getBeforeSet"
		],

		"guard-for-in": ["error"],

		// NOTE: No need to restrict variable names.
		"id-denylist": ["off"],

		"id-length": ["error"],

		// NOTE: Already using camelCase.
		"id-match": ["off"],

		// NOTE: Allows gated declarations "let x; if (y) x=4".
		"init-declarations": ["off"],

		// NOTE: Enforces arbitrary maxes of certain patterns.
		"max-classes-per-file": [
			"error",
			// Default 1
			{"max": 1}
		],

		"max-depth": [
			"error",
			// Default 4
			{"max": 6}
		],

		"max-lines": [
			"error",
			// Default 300
			{"max": 300}
		],

		"max-lines-per-function": [
			"error",
			// Default 50
			{"max": 60}
		],

		"max-nested-callbacks": [
			"error",
			// Default 10
			{"max": 6}
		],

		"max-params": [
			"error",
			// Default 3
			{"max": 3}
		],

		"max-statements": [
			"error",
			// Default 10
			{"max": 30}
		],

		// NOTE: None of the settings are really attractive.
		"multiline-comment-style": ["off"],

		"new-cap": ["error"],
		"no-alert": ["error"],
		"no-array-constructor": ["error"],
		"no-bitwise": ["error"],
		"no-caller": ["error"],
		"no-case-declarations": ["error"],

		// NOTE: This marks parenthesis as "less confusing".
		"no-confusing-arrow": [
			"error",
			{"allowParens": true}
		],

		// NOTE: Keep some console methods, but log is evil!
		"no-console": [
			"error",
			{"allow": ["clear", "info", "warn", "error", "table"]}
		],

		"no-continue": ["error"],
		"no-delete-var": ["error"],

		// NOTE: Doesn't seem helpful.
		"no-div-regex": ["off"],
		"no-else-return": ["off"],

		"no-empty": ["error"],
		"no-empty-function": ["error"],

		// NOTE: Use "eqeqeq" instead.
		"no-eq-null": ["off"],

		"no-eval": ["error"],
		"no-extend-native": ["error"],
		"no-extra-bind": ["error"],
		"no-extra-boolean-cast": ["error"],
		"no-extra-label": ["error"],
		"no-extra-semi": ["error"],
		"no-floating-decimal": ["error"],
		"no-global-assign": ["error"],

		// NOTE: Boolean coercion is fine.
		"no-implicit-coercion": [
			"error",
			{"boolean": false}
		],

		"no-implicit-globals": ["error"],
		"no-implied-eval": ["error"],

		// NOTE: Wow dumb
		"no-inline-comments": ["off"],

		"no-invalid-this": ["error"],
		"no-iterator": ["error"],
		"no-label-var": ["error"],

		// NOTE: Labels can be used to break parent statements.
		"no-labels": ["off"],

		"no-lone-blocks": ["error"],
		"no-lonely-if": ["error"],
		"no-loop-func": ["error"],

		// NOTE: This turned out to be supremely annoying.
		"no-magic-numbers": ["off"],

		"no-mixed-operators": ["error"],
		"no-multi-assign": ["error"],
		"no-multi-str": ["error"],
		"no-negated-condition": ["error"],

		// NOTE: I like nested ternaries.
		"no-nested-ternary": ["off"],

		// NOTE: We use new.
		"no-new": ["off"],

		"no-new-func": ["error"],
		"no-new-object": ["error"],
		"no-new-wrappers": ["error"],
		"no-nonoctal-decimal-escape": ["error"],
		"no-octal": ["error"],
		"no-octal-escape": ["error"],

		// NOTE: Turns out this can help keep naming cleaner.
		"no-param-reassign": ["off"],

		"no-plusplus": ["error"],
		"no-proto": ["error"],
		"no-redeclare": ["error"],
		"no-regex-spaces": ["error"],

		// NOTE: Nothing to restrict here.
		"no-restricted-exports": ["off"],
		"no-restricted-globals": ["off"],
		"no-restricted-imports": ["off"],
		"no-restricted-properties": ["off"],
		"no-restricted-syntax": ["off"],

		"no-return-assign": ["error"],

		// NOTE: We expect to await items in async.
		"no-return-await": ["off"],

		"no-script-url": ["error"],
		"no-sequences": ["error"],

		// NOTE:
		// Turns out shadowing can help with readability.
		// With this, we'd use longer, more arbitrary names.
		"no-shadow": ["off"],

		"no-shadow-restricted-names": ["error"],

		// NOTE: Ternaries are nice.
		"no-ternary": ["off"],

		"no-throw-literal": ["error"],

		// NOTE: MEH.
		"no-undef-init": ["off"],
		"no-undefined": ["off"],
		"no-underscore-dangle": ["off"],

		"no-unneeded-ternary": ["error"],

		// NOTE: Allow expressions which cause side-effects.
		"no-unused-expressions": [
			"error",
			{"allowShortCircuit": true, "allowTernary": true}
		],

		"no-unused-labels": ["error"],
		"no-useless-call": ["error"],
		"no-useless-catch": ["error"],
		"no-useless-computed-key": ["error"],
		"no-useless-concat": ["error"],
		"no-useless-constructor": ["error"],
		"no-useless-escape": ["error"],
		"no-useless-rename": ["error"],
		"no-useless-return": ["error"],
		"no-var": ["error"],

		// NOTE: We use void to show purposefully unawaited async calls.
		"no-void": ["off"],

		// NOTE: Useless
		"no-warning-comments": ["off"],

		"no-with": ["error"],

		// NOTE: the record object should be consistent!
		"object-shorthand": [
			"error",
			"consistent-as-needed"
		],

		// NOTE: Simpler to read
		"one-var": [
			"error",
			"never"
		],

		// NOTE: Also simpler here
		"one-var-declaration-per-line": [
			"error",
			"always"
		],

		"operator-assignment": ["error"],
		"prefer-arrow-callback": ["error"],
		"prefer-const": ["error"],
		"prefer-destructuring": ["error"],
		"prefer-exponentiation-operator": ["error"],
		"prefer-named-capture-group": ["error"],
		"prefer-numeric-literals": ["error"],
		"prefer-object-has-own": ["error"],
		"prefer-object-spread": ["error"],
		"prefer-promise-reject-errors": ["error"],
		"prefer-regex-literals": ["error"],
		"prefer-rest-params": ["error"],
		"prefer-spread": ["error"],
		"prefer-template": ["error"],

		// NOTICE
		// Props shouldn't have quotes if not needed.
		// They should be consistent if they are, however.
		"quote-props": [
			"error",
			"consistent-as-needed"
		],

		// NOTE: Don't complicate parseInt unless its needed.
		"radix": [
			"error",
			"as-needed"
		],

		"require-await": ["error"],
		"require-unicode-regexp": ["error"],
		"require-yield": ["error"],
		"sort-imports": ["error"],

		// NOTE: Its better if related values stay together.
		"sort-keys": ["off"],
		"sort-vars": ["off"],

		// NOTE: Should have spaced block comments as well.
		"spaced-comment": [
			"error",
			"always",
			{"block": {"balanced": true}}
		],

		"strict": ["error"],
		"symbol-description": ["error"],
		"vars-on-top": ["error"],
		"yoda": ["error"],

		/* STYLISTIC FIXES FOR LAYOUT & FORMATTING */
		// NOTE: Seperate brackets if there are any newlines.
		"array-bracket-newline": [
			"error",
			{"multiline": true}
		],

		// NOTE: Always use spacing between ( ), [ ], and { }.
		"array-bracket-spacing": [
			"error",
			"never"
		],

		// NOTE: Keep newlines consistent on a per-array basis.
		"array-element-newline": [
			"error",
			"consistent"
		],

		"arrow-parens": ["error"],
		"arrow-spacing": ["error"],
		"block-spacing": ["error"],

		// NOTE: OPINION: Stroustrup is the best brace style.
		"brace-style": [
			"error",
			"stroustrup"
		],

		// NOTE: This is best for diff churn.
		"comma-dangle": [
			"error",
			"always-multiline"
		],

		"comma-spacing": ["error"],
		"comma-style": ["error"],

		// NOTE: Always use spacing between ( ), [ ], and { }.
		"computed-property-spacing": [
			"error",
			"never"
		],

		// NOTE: Start newlines with operators where applicable.
		"dot-location": [
			"error",
			"property"
		],

		"eol-last": ["error"],
		"func-call-spacing": ["error"],

		"function-call-argument-newline": [
			"error",
			"consistent"
		],

		// NOTE: Seperate parens if there are any newlines.
		"function-paren-newline": [
			"error",
			"multiline"
		],

		// NOTE: Space it like you would "async"
		"generator-star-spacing": [
			"error",
			"both"
		],

		"implicit-arrow-linebreak": ["error"],

		// NOTE: We use tabs! Don't indent member expressions!
		"indent": [
			"error",
			"tab",
			{"SwitchCase": 1, "MemberExpression": 0}
		],

		// NOTE: Prefer single-quotes wherever possible!
		"jsx-quotes": [
			"error",
			"prefer-single"
		],

		"key-spacing": ["error"],
		"keyword-spacing": ["error"],

		// NOTE: Nope.
		"line-comment-position": ["off"],

		"linebreak-style": ["error"],

		// NOTE: Nope again.
		"lines-around-comment": ["off"],

		"lines-between-class-members": ["error"],

		// NOTE:
		// The max is 90, but its also recommended to keep
		// 	line-length below 60 if its feasible to do so.
		"max-len": [
			"error",
			{"code": 90, "tabWidth": 2}
		],

		"max-statements-per-line": ["error"],

		// NOTE: Use multiline ternaries if there's newlines.
		"multiline-ternary": [
			"error",
			"always-multiline"
		],

		"new-parens": ["error"],
		"newline-per-chained-call": ["error"],

		// NOTE:
		// Unfortunately, this doesn't provide the config I'd like.
		// It affects implicit returns in arrow functions.
		"no-extra-parens": ["off"],

		"no-mixed-spaces-and-tabs": ["error"],
		"no-multi-spaces": ["error"],

		// NOTE: Double-newlines are good for seperating stuff.
		"no-multiple-empty-lines": [
			"error",
			{ "max": 2, "maxBOF": 0, "maxEOF": 0 }
		],

		// NOTE:
		// Shouldn't mix tabs with inner-code.
		// Just use the character exclusively as indentation.
		"no-tabs": [
			"error",
			{"allowIndentationTabs": true}
		],

		"no-trailing-spaces": ["error"],
		"no-whitespace-before-property": ["error"],
		"nonblock-statement-body-position": ["error"],

		// NOTE: Keep newlines consistent on a per-object basis.
		"object-curly-newline": [
			"error",
			{"multiline": true}
		],

		// NOTE: Always use spacing between ( ), [ ], and { }.
		"object-curly-spacing": [
			"error",
			"never"
		],

		// NOTE: Keep multiline properties on own lines.
		"object-property-newline": [
			"error",
			{"allowAllPropertiesOnSameLine": true}
		],

		// NOTE: Start lines with operators where applicable.
		"operator-linebreak": [
			"error",
			"before"
		],

		// NOTE: gross.
		"padded-blocks": [
			"error",
			"never"
		],

		// NOTE:
		// Always a space before the first export.
		"padding-line-between-statements": [
			"error",
			{
				"prev": "*",
				"next": "export",
				"blankLine": "always"
			},
			{
				"prev": "export",
				"next": "export",
				"blankLine": "any"
			}
		],

		// NOTE: Single Quotes FTW
		"quotes": [
			"error",
			"single"
		],

		"rest-spread-spacing": ["error"],

		// NOTE: Ew.
		"semi": [
			"error",
			"never",
			{"beforeStatementContinuationChars": "never"}
		],

		"semi-spacing": ["error"],
		"semi-style": ["error"],
		"space-before-blocks": ["error"],
		"space-before-function-paren": ["error"],

		// NOTE: Always use spacing between ( ), [ ], and { }.
		"space-in-parens": [
			"error",
			"never",
			{ "exceptions": ["empty"] }
		],

		"space-infix-ops": ["error"],
		"space-unary-ops": ["error"],
		"switch-colon-spacing": ["error"],

		// NOTE: Always use spacing between ( ), [ ], and { }.
		"template-curly-spacing": [
			"error",
			"never"
		],

		// NOTE: Tags are like "gql`Query {...`", no spaces.
		"template-tag-spacing": [
			"error",
			"never"
		],

		"unicode-bom": ["error"],

		// NOTE: Inside option causes better readability.
		"wrap-iife": [
			"error",
			"inside"
		],

		"wrap-regex": ["error"],

		// NOTE: Consistent with "generator-star-spacing"
		"yield-star-spacing": [
			"error",
			"both"
		]
	}
}
